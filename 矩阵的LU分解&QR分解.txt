from Matrix import Matrix


def lu(matrix):
    rows = matrix.rows
    cols = matrix.cols
    if rows != cols:
        raise ValueError("Matrix must be square")
    L = [[1.0 if a == b else 0.0 for a in range(cols)] for b in range(rows)]
    U = [[float(matrix.data[b][a]) for a in range(cols)] for b in range(rows)]
    for i in range(rows - 1):
        for j in range(i + 1, rows):
            L[j][i] = U[j][i] / U[i][i]
        for j in range(i + 1, rows):
            for k in range(i + 1, rows):
                U[j][k] = U[j][k] - L[j][i] * U[i][k]
        for j in range(i + 1, rows):
            U[j][i] = 0
    return Matrix(L), Matrix(U)


def tril_indices(n, k=0, m=None):
    if m is None:
        m = n
    if n < 1 or k <= -n or m < 1:
        return [], []
    _indices = [[x, y] for y in range(n) for x in range(y + k + 1) if x < m]
    return [y[1] for y in _indices], [x[0] for x in _indices]


def hypot(a, b):
    return (a ** 2 + b ** 2) ** 0.5


def identity(n):
    return Matrix([[1.0 if a == b else 0.0 for a in range(n)] for b in range(n)])


def qr(matrix):
    r = matrix.rows
    c = matrix.cols
    Q = identity(r).data
    R = [[float(item) for item in line] for line in matrix.data]
    rows, cols = tril_indices(r, -1, c)
    for row, col in zip(rows, cols):
        if R[row][col] != 0:
            _r = hypot(R[col][col], R[row][col])
            c = R[col][col] / _r
            s = -R[row][col] / _r
            G = identity(r).data
            G[col][col] = c
            G[row][row] = c
            G[row][col] = s
            G[col][row] = -s
            G = Matrix(G)
            Q = Matrix(Q)
            R = Matrix(R)
            Q = Q.inner(G).data
            R = (G @ R).data
    return Matrix(Q), Matrix(R)


A = [[1, 4, 1, 5, 9], [2, 6, 5, 3, 5], [8, 9, 7, 9, 3], [2, 3, 8, 4, 6], [2, 6, 4, 3, 3]]

m = Matrix(A)

_L, _U = lu(m)
print(_L)
print()
print(_U)
print()
print(_L @ _U)
print()

_Q, _R = qr(m)
print()
print(_Q)
print()
print(_R)
print()
print(_Q @ _R)
